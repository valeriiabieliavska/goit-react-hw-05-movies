{"version":3,"file":"static/js/76.f245e76a.chunk.js","mappings":"yRACA,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA+F,uBAA/F,EAAgI,sB,mBCwDhI,EAhDa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAc,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaJ,GAFlB,OAEbK,EAFa,OAGnBR,EAAQQ,GAHW,gDAKnBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,iBAAsB,KAAMC,QAA5B,iBANmB,yBAQnBV,GAAa,GARM,4EAAH,qDAWpBI,GACD,GAAE,CAACH,KAGF,2BACGF,GACC,SAACY,EAAA,EAAD,KAEA,eAAIC,UAAWC,EAAf,SACGhB,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,UAA9B,OACR,gBAAIN,UAAWC,EAAf,WACE,gBACED,UAAWC,EACXM,IAAKH,EAAeI,EAAAA,EAAeJ,EAAeK,EAClDC,IAAKL,EACLM,MAAM,SAER,eAAGX,UAAWC,EAAd,UACG,IACAI,EAFH,IAEUC,IAAa,2CAAmBA,UATVH,EAD1B,OAgBd,SAAC,KAAD,MAGL,C,4ECrDYJ,EAAS,WACpB,OACE,SAAC,KAAD,CACEa,OAAQ,GACRD,MAAO,GACPE,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,GAG3B,C,mMCfDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAU,mCAEVC,EAAiB,mCAAG,oGACZF,EAAAA,EAAAA,IAAA,uBAAkC,CACnDG,OAAQ,CACNC,QAASH,EACTI,KAAM,KAJqB,cACzBC,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,qDAUjBC,EAAgB,mCAAG,WAAMC,GAAN,uFACXV,EAAAA,EAAAA,IAAA,8CACsBU,EADtB,+BAEjB,CACEP,OAAQ,CACNC,QAASH,EACTI,KAAM,KANkB,cACxBC,EADwB,yBAUvBA,EAAKC,KAAKC,SAVa,2CAAH,sDAahBG,EAAe,mCAAG,WAAM3C,GAAN,uFACVgC,EAAAA,EAAAA,IAAA,iBAAoBhC,EAApB,oBAA0C,CAC3DmC,OAAQ,CACNC,QAASH,KAHgB,cACvBK,EADuB,yBAMtBA,EAAKC,MANiB,2CAAH,sDASfnC,EAAY,mCAAG,WAAMJ,GAAN,uFACPgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAiD,CAClEmC,OAAQ,CACNC,QAASH,KAHa,cACpBK,EADoB,yBAMnBA,EAAKC,KAAK3C,MANS,2CAAH,sDASZgD,EAAe,mCAAG,WAAM5C,GAAN,uFACVgC,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,4BAAiD,CAClEmC,OAAQ,CACNC,QAASH,KAHgB,cACvBK,EADuB,yBAMtBA,EAAKC,KAAKC,SANY,2CAAH,qD,uDC/CrB,IAAMrB,EAAe,iC","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/api.js","services/constants.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\",\"castDesc\":\"Cast_castDesc__MkIY-\",\"castImg\":\"Cast_castImg__T4WbF\"};","import { getMovieCast } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BASE_IMG_URL } from 'services/constants';\nimport { Loader } from 'components/Loader/Loader';\nimport placeholder from '../../image/placeholder2.jpg';\nimport css from './Cast.module.css';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchMovieCast = async () => {\n      try {\n        const movieCast = await getMovieCast(id);\n        setCast(movieCast);\n      } catch (error) {\n        console.log(error);\n        toast.error(`Sorry, ${error.message}! Try again)`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [id]);\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className={css.castList}>\n          {cast.map(({ order, profile_path, name, character }) => (\n            <li className={css.castItem} key={order}>\n              <img\n                className={css.castImg}\n                src={profile_path ? BASE_IMG_URL + profile_path : placeholder}\n                alt={name}\n                width=\"200\"\n              />\n              <p className={css.castDesc}>\n                {' '}\n                {name} {character && <span>in the role {character}</span>}\n              </p>\n            </li>\n          ))}\n        </ul>\n      )}\n      <Toaster />\n    </div>\n  );\n};\n\nexport default Cast;\n","import { Oval } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Oval\n      height={80}\n      width={80}\n      color=\"#020202\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"oval-loading\"\n      secondaryColor=\"#002002\"\n      strokeWidth={2}\n      strokeWidthSecondary={2}\n    />\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_KEY = '98b03a6dbdbff755e542e0974ad218d2';\n\nexport const getTrendingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const resp = await axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return resp.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const resp = await axios.get(`/movie/${id}?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data;\n};\n\nexport const getMovieCast = async id => {\n  const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const resp = await axios.get(`movie/${id}/reviews?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.results;\n};\n","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';"],"names":["useState","cast","setCast","isLoading","setIsLoading","id","useParams","useEffect","fetchMovieCast","getMovieCast","movieCast","console","log","toast","message","Loader","className","css","map","order","profile_path","name","character","src","BASE_IMG_URL","placeholder","alt","width","height","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","axios","API_KEY","getTrendingMovies","params","api_key","page","resp","data","results","getMoviesByQuery","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}